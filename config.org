;;; config.org --- Emacs configuration file in org mode format. 
* Emacs config file
  Collection of packages and configs that I use
#+BEGIN_SRC emacs-lisp
;; Tell emacs where is your personal elisp lib dir
(add-to-list 'load-path "~/.emacs.d/packages/")
;;macro for setting custom variables
(defmacro csetq (variable value)
  `(funcall (or (get ',variable 'custom-set)
                'set-default)
            ',variable ,value))
#+END_SRC
* Set package repository
  This needs to be in init.el Otherwise nothing works.
#+BEGIN_SRC emacs-lisp
;;; There are few public repositories of Emacs packages. 
;;; I'm using melpa and you should too. I don't know why though.
(require 'package)
(setq package-enable-at-startup nil)
(add-to-list 'package-archives
	     '("melpa" . "http://melpa.milkbox.net/packages/"))
(package-initialize)
#+END_SRC
* Use-package package
#+BEGIN_SRC emacs-lisp
;; use-package is a nice package that simplifies package installation
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
#+END_SRC
* Better looking theme
#+BEGIN_SRC emacs-lisp
;;; there is a flavor of Emacs called spacemacs, 
;;; that uses space key instead of Ctrl. From what
;;; I could gather it is clunky, but the theme is nice.
(unless (package-installed-p 'spacemacs-theme)
   (package-refresh-contents)
   (package-install 'spacemacs-theme))
#+END_SRC
* Multiple Cursors
#+BEGIN_SRC emacs-lisp
;;No need to describe this feature. Everybody knows it. Maybe not.
;;It allows you to have as many cursors on the screen as your 
;; CPU+GPU+Your-Head can handle. Allows you to use Dark Magic. 
(use-package multiple-cursors
  :ensure t
  :config
     (global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)
     (global-set-key (kbd "C->") 'mc/mark-next-like-this)
     (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
     (global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)
     (define-key mc/keymap (kbd "<return>") nil))
#+END_SRC
* Helm
#+BEGIN_SRC emacs-lisp
;;Helm is modified help buffer. It attaches itself to a lot of actions
;;in Emacs environment and create more functional and better looking
;;help buffers. 
(use-package helm
  :ensure t
  :init
  (helm-mode 1))

;;install package first
(use-package helm-swoop
  :ensure t
  :config
     (global-set-key (kbd "M-x") 'helm-M-x)
     (global-set-key (kbd "M-i") 'helm-swoop);;helm search
     (global-set-key (kbd "M-u") 'helm-show-kill-ring);;BEST FEATURE EVER
     (global-set-key (kbd "C-c f") 'helm-locate));;find stuff quickly
#+END_SRC
* Terminal
** Setting default shell to bash
#+BEGIN_SRC emacs-lisp
   (defvar my-term-shell "/bin/bash")
   (defadvice ansi-term (before force-bash)
      (interactive (list my-term-shell)))
   (ad-activate 'ansi-term)
#+END_SRC
** Binding keys to launch shell
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "<C-return>") 'shell)
#+END_SRC
* Org
** Org Bullets
   Better bullets in org mode
#+BEGIN_SRC emacs-lisp
   (use-package org-bullets
      :ensure t
      :config
      (add-hook 'org-mode-hook (lambda () (org-bullets-mode))))
#+END_SRC
* Misc
** Pretty unicode characters
(use-package pretty-mode
    :ensure t
    :config
    (global-pretty-mode 1))
** Prevent emacs from autosaving and cluttering source folders
#+BEGIN_SRC emacs-lisp
(setq auto-save-default nil)
(setq make-backup-file nil)
#+END_SRC
** No Tabs
#+BEGIN_SRC emacs-lisp
(setq-default indent-tabs-mode nil)
#+END_SRC   
** Easy selection of logical region
#+BEGIN_SRC emacs-lisp
(use-package expand-region
  :ensure t
  :config
  (global-set-key (kbd "C-=") 'er/expand-region))
#+END_SRC
** Rainbow delimeters
#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters
  :ensure t
  :init
  (rainbow-delimiters-mode))
#+END_SRC
** Winner Mode
   Winner Mode is a global minor mode. When activated, it allows you
   to “undo” (and “redo”) changes in the window configuration with
   the key commands ‘C-c left’ and ‘C-c right’
#+BEGIN_SRC emacs-lisp
(when (fboundp 'winner-mode)
   (winner-mode 1))
#+END_SRC
   
** Vertical indentation guide 
#+BEGIN_SRC emacs-lisp
(use-package indent-guide
  :ensure t
  :init
  (indent-guide-global-mode))
#+END_SRC
   
** Powerline is a better looking status bar at the bottom.
#+BEGIN_SRC emacs-lisp
(use-package powerline
  :ensure t
  :init
  (powerline-default-theme))
#+END_SRC
   
** Simplify interaction 
#+BEGIN_SRC emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC
** Editing convenience improvements
#+BEGIN_SRC emacs-lisp
(setq scroll-conservatively 100)
(setq ring-bell-function 'ignore)
(when window-system (global-hl-line-mode t))
(when window-system (global-prettify-symbols-mode t))
;;highlight cursor line on buffer opening
(use-package beacon
  :ensure t
  :init
  (beacon-mode -1))
#+END_SRC

** Remove toolbar, menu, scrollbar, startup screen
#+BEGIN_SRC emacs-lisp
;;clean up GUI GARBAGE
(tool-bar-mode -1)
(menu-bar-mode -1)
(scroll-bar-mode -1)
(setq inhibit-startup-message t)
#+END_SRC
** Key bindings help display. Currently disabled.
#+BEGIN_SRC emacs-lisp
;;(use-package which-key
;;  :ensure t
;;  :init
;;  (which-key-mode))
#+END_SRC
** enable electric pair mode by default
#+BEGIN_SRC emacs-lisp
(electric-pair-mode 1)
#+END_SRC   
** desktop save mod
   Preserves your buffers across emacs sessions.
#+BEGIN_SRC emacs-lisp
(desktop-save-mode 1)
#+END_SRC      
* Diff icult to set up. 
** Ediff -  Visual interface for diff and patches
#+BEGIN_SRC emacs-lisp
;;if you are on Linux 
(use-package ediff
   :ensure t
   :init)

;;if you are on windouzzzzz os. Good luck. 
;; download cygwin-mount and setup-cygwin to "D:/Cygwin/bin"
;; Do you feel lucky today? try leaving package extensions.
;; best not to include the ending “.el” or “.elc” 
;;(load "cygwin-mount")
;;(load "setup-cygwin")

;;(setenv "PATH" (concat "D:/Cygwin/bin;" (getenv "PATH")))
;;(setq exec-path (cons "D:/Cygwin/bin" exec-path))
;;(require 'cygwin-mount)
;;(cygwin-mount-activate)

;;(csetq ediff-split-window-function 'split-window-horizontally)
;;(csetq ediff-diff-options "-w")
;;(csetq ediff-window-setup-function 'ediff-setup-windows-plain)

;;(winner-mode)
;;(add-hook 'ediff-after-quit-hook-internal 'winner-undo)

#+END_SRC
* Origami - text folging support
****  Install dependecies first
***** string manipulation package
#+BEGIN_SRC emacs-lisp
(use-package s
  :ensure t
  :init)
#+END_SRC
***** list api package
#+BEGIN_SRC emacs-lisp
(use-package dash
  :ensure t
  :init)
#+END_SRC
***** make Emacs aware of origami package
#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path (expand-file-name "~/.emacs.d/packages/"))
(require 'origami)
#+END_SRC
***** TODO define key map for ease of use
* Font
#+BEGIN_SRC emacs-lisp
(set-face-attribute 'default nil :family "Consolas" :height 120)
#+END_SRC

* helm-swoop for compilation errors
  one little annoyance is that buffer needs to be cleared before. Otherwise
  you will catch previous errors too. Possible work around is to use compile
  command or what I do is to define a macro to call Ashlee\clear and then compile
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x C-r") (lambda () (interactive) (helm-swoop :$query "error:")))
#+END_SRC
  star compile
#+BEGIN_SRC emacs-lisp
(fset 'build-and-push-rs
   (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item (quote ([7 3 134217839 46 47 83 116 97 114 66 117 105 108 100 80 117 115 104 46 98 97 116] 0 "%d")) arg)))
(global-set-key (kbd "C-c s") 'build-and-push-rs)   
;;(fset 'star-build
;;   (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item (quote ([3 134217839 83 116 97 114 tab return] 0 "%d")) arg)))
#+END_SRC

* Magit - nice git package
#+BEGIN_SRC emacs-lisp
(use-package magit
   :ensure t
   :init)
(global-set-key (kbd "C-x g") 'magit-status)
#+END_SRC
* Spelling correction
  #+BEGIN_SRC emacs-lisp
(use-package helm-flyspell
  :ensure t
  :config
  (global-set-key (kbd "C-:") 'helm-flyspell-correct))
#+END_SRC   

* Sr SpeedBar - makes speedbar show in current frame
#+BEGIN_SRC emacs-lisp
(use-package sr-speedbar
  :ensure t
  :init)
#+END_SRC
* Pylint
#+BEGIN_SRC emacs-lisp
(use-package pylint
  :ensure t
  :init)
(autoload 'pylint "pylint")
(add-hook 'python-mode-hook 'pylint-add-menu-items)
(add-hook 'python-mode-hook 'pylint-add-key-bindings)
#+END_SRC
* Complete anything - Company mode
** C/C++ company+irony
#+BEGIN_SRC emacs-lisp
(use-package company
  :ensure t
  :config
   (setq company-idle-delay 0)
   (setq company-minimum-prefix-length 3))
;;; define a better keyboard map
(with-eval-after-load 'company
          ;;null default scrolling keys
  (define-key company-active-map (kbd "M-n") nil)
  (define-key company-active-map (kbd "M-p") nil)
          ;;define normal keys that we used to
  (define-key company-active-map (kbd "C-n") 'company-select-next)
  (define-key company-active-map (kbd "C-p") 'company-select-previous))
;;; add back end source code parser c++
(use-package company-irony 
  :ensure t
  :config
  (require 'company)
  (add-to-list 'company-backends 'company-irony))
;;;start irony when starting c/c++ modes and do auto compile options (more dragons)
(use-package irony 
  :ensure t
  :config
  (add-hook 'c++-mode-hook 'irony-mode)
  (add-hook 'c-mode-hook 'irony-mode)
  (add-hook 'irony-mode-hook 'irony-cdb--autodetect-compile-options))
#+END_SRC
**  Python company+Jedi
#+BEGIN_SRC emacs-lisp
;;;PYTHON
;;; add back end source code parser python
(use-package jedi
  :ensure t
  :config
  (add-hook 'python-mode-hook 'jedi:install-server)
  (add-hook 'python-mode-hook 'jedi:setup)
  (add-hook 'python-mode-hook 'jedi-mode))

(use-package company-jedi
  :ensure t
  :config
  (require 'company)
  ;;;start jedi back end on python mode start
  (add-to-list 'company-backends 'company-jedi))

;;;start company mode when starting c/c++/python modes
(with-eval-after-load 'company
  (add-hook 'c++-mode-hook 'company-mode)
  (add-hook 'c-mode-hook 'company-mode)
  (add-hook 'python-mode-hook 'company-mode))
#+END_SRC

* Projectile with helm
  Project manipulation package with helm GUI...NICE!!!
#+BEGIN_SRC emacs-lisp
(use-package helm-projectile 
  :ensure t
  :config
   (projectile-global-mode)
   (setq projectile-completion-system 'helm)
   (helm-projectile-on))
#+END_SRC

* If you ever want to find nice shortcuts 
 just type <which-key-show-keymap> 
 then look for your mode, press Enter.
 To keep that buffer press C-h
 If you don't know any keyboard shortcut
 you can enable which-key-mode to give you hints.
 I don't like it, but you may. To do so M-x which-key-mode
 enables the mode. Then you can press C-h to get info.
 
(provide 'config)
;;; config.org ends here
